(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{362:function(a,s,t){"use strict";t.r(s);var e=t(7),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),s("p",[a._v("Docker 可以通过读取来自 "),s("code",[a._v("Dockerfile")]),a._v(" （一个文本文档），其中包含用户可以在命令行上调用以组装图像的所有命令。使用"),s("code",[a._v("docker build")]),a._v(" 用户可以创建一个连续执行多个命令行指令的自动构建。")]),a._v(" "),s("h2",{attrs:{id:"快速上手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速上手"}},[a._v("#")]),a._v(" 快速上手")]),a._v(" "),s("blockquote",[s("p",[a._v("这里以直接使用已打包好的jar配合docker构建自定义镜像，镜像构建不只这一种方式，例如："),s("a",{attrs:{href:"https://blog.csdn.net/javase1086/article/details/123581740",target:"_blank",rel:"noopener noreferrer"}},[a._v("SpringBoot 构建 Docker 镜像的最佳 3 种方式"),s("OutboundLink")],1),a._v("，实际中应该以对应的硬件环境和资源进行选择，毕竟这个编程的世界没有银弹对吧~")])]),a._v(" "),s("h3",{attrs:{id:"首先创建个基础应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首先创建个基础应用"}},[a._v("#")]),a._v(" 首先创建个基础应用")]),a._v(" "),s("p",[a._v("使用 Spring 提供的 "),s("a",{attrs:{href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("spring initializr"),s("OutboundLink")],1),a._v(" 快速创建单应用，懒惰的同学可以直接IDEA创建，然后随便写个rest api，用于测试使用，并将其打包成可执行jar包")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RestController")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DemoCon")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@GetMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/docker"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello docker!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"创建dockerfile文件-和jar包在同一目录下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建dockerfile文件-和jar包在同一目录下"}},[a._v("#")]),a._v(" 创建Dockerfile文件（和jar包在同一目录下）")]),a._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 需要依赖的其他环境（镜像源）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" amazoncorretto:8u332")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 把宿主机的文件拷贝到容器指定目录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("COPY")]),a._v(" easy-upload.jar /opt")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 暴露的接口")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("EXPOSE")]),a._v(" 5680")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# CDM脚本工作目录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("WORKDIR")]),a._v(" /opt")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 容器启动后执行的命令")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("CMD")]),a._v(" java -Xmx512m -Xms512m -jar easy-upload.jar")]),a._v("\n")])])]),s("h2",{attrs:{id:"构建镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[a._v("#")]),a._v(" 构建镜像")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -t 是指定镜像源名称和版本，末尾的点是指当前的Dockerfile文件（Docker 的约定）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" easy-upload:1.0.0 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 如果有多个命令可以在其他目录创建Dockerfile（注意，COPY 命令只能从 Dockerfile 所在文件为基础的相对路径，也就是需要把jar复制到Dockerfile同目录下）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" easy-upload:1.0.0 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" ./mydockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),s("p",[a._v("通过命令 docker images easy-upload:1.0.0查看一下我们自定义构建的镜像")]),a._v(" "),s("h2",{attrs:{id:"使用构建的镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用构建的镜像"}},[a._v("#")]),a._v(" 使用构建的镜像")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建容器")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" easy-upload "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5680")]),a._v(":5680 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" easy-upload:1.0.0\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看容器运行")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v("\n")])])]),s("p",[a._v("浏览器验证一下，OK！")])])}),[],!1,null,null,null);s.default=r.exports}}]);